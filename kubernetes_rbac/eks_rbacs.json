  ##################### Create AWS EKS clsuster #######################################################################

## Pre-requisite links
  https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html

## Pre-requisite links
  https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html

## Create EKS cluster
  eksctl create cluster --name eks-cluster-204 --node-type t2.large --nodes 1 --nodes-min 1 --nodes-max 2 --region eu-west-2

## Get EKS Cluster service
eksctl get cluster --name eks-cluster-204 --region eu-west-2

## Get EKS Pod data.
kubectl get pods --all-namespaces

## Delete EKS cluster
eksctl delete cluster --name eks-cluster-204 --region eu-west-2

####################################################################################################################

#################### EKS Cluster RBACs #############################################################################
## first create the rbac-test namespace, and then install nginx into it
kubectl create namespace rbac-test

## Deploy nginx pod on clsuster
kubectl create deploy nginx --image=nginx -n rbac-test

## To verify the test pods were properly installed
kubectl get all -n rbac-test
## get staus of the ngnx pod

kubectl get pods -n rbac-test 


## Create IAM user and create access key
aws iam create-user --user-name rbac-user


#once user was created creats access key

aws iam create-access-key --user-name rbac-user

#now IAM user created but does not have acess to kubenetes RBAC

Now change to another terminal where u are not the admin and use the newly generated IAM accesskey and secret to authenticate into aws

aws configure


#after the above run to the below to confirm if authenticated in aws for rbac-user
aws sts get caller-identity
{
    "UserId": "",
    "Account": "",
    "Arn": "arn:aws:iam::user/rbac-user"
}

## We will use these set another context with using above credentials
AWS configure.

But first create a configMap of the user

## MAP AN IAM USER TO K8S
kubectl apply -f aws-auth.yaml --validate=false
kubectl apply -f ./aws-auth.yaml

#when u run the below command you get the error
kubectl apply -f ./aws-auth.yaml
error: error validating "./aws-auth.yaml": error validating data: failed to
 download openapi: the server has asked for the client to provide credentials;
 if you choose to ignore these errors, turn validation off with --validate=false

#you need to kill the other terminal and relonging again with your rbac-user credentials

#clear you must loggin again in the old terminal with the admin credentials

aws configure

#after run
aws sts get-caller-identity 
#now run kubectl apply -f ./aws-auth.yaml
Warning: resource configmaps/aws-auth is missing the
 kubectl.kubernetes.io/last-applied-configuration annotation which is required by
  kubectl apply. kubectl apply should only be used on resources created declaratively 
  by either kubectl create --save-config or kubectl apply.
   The missing annotation will be patched automatically.
configmap/aws-auth configured
#now bring up the another terminal and login as rbac-user
aws configure
## Verify newly created user after login AND it should throw below errors
kubectl get pods -n rbac-test
#error: You must be logged in to the server (Unauthorized)-----this one use case that proves that a user without administratieve access cannot come and 
#do stuffs

#now log in with your administrative access
aws configure


#now run the aws sts-get-caller-identity

#Now run the command
kubectl get pods -n rbac-test
NAME                    READY   STATUS    RESTARTS   AGE
nginx-bf5d5cf98-gdhrp   1/1     Running   0          138m

#the above shows the point we are talking about by default 
the rbac-user gets the inheritance and get the administrative priviledge

## Create a role and role binding from Admin access
kubectl apply -f ./rbacuser-role.yaml
kubectl apply -f ./rbacuser-role-binding.yaml
rolebinding.rbac.authorization.k8s.io/read-pods created

## login with Kubernetes rbac-user again
using
 aws configure

 ##confirm it is rbac-user
 aws sts get-caller-identity


## Verify newly created user after login AND it should Not throw any errors
kubectl get pods -n rbac-test                
NAME                    READY   STATUS    RESTARTS   AGE
nginx-bf5d5cf98-gdhrp   1/1     Running   0          3h52m

## Verify newly created user after login AND it should throw errors
kubectl get pods -n kube-system

kubectl get deployment -n rbac-test
NAME    READY   UP-TO-DATE   AVAILABLE   AGE
nginx   1/1     1            1           3h54m

kubectl describe pod nginx-bf5d5

kubectl describe pod nginx-bf5d5cf98-gdhrp -n rbac-test 
Name:             nginx-bf5d5cf98-gdhrp
Namespace:        rbac-test
Priority:         0



#now if the same user tries to do anything in another namespace like kube-system he will not be permitted, 
tihis is how we restrict users in a big kubernetes team.
This is how roles and and rolebinding are done called Role based access configuration
####################################################################################################################